import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class ShiftHandler extends DefaultHandler {

	List<Footer> myFooters;
	List<Header> myHeaders;
	List<App> myApps;

	private String tempVal;
	private String tempValu;
	private String tempValue;
	private String tempUom;

	// to maintain context
	private Footer tempFooter;
	private Header tempHeader;
	private App tempApp;

	public ShiftHandler() {
		myFooters = new ArrayList<Footer>();
		myHeaders = new ArrayList<Header>();
		myApps = new ArrayList<App>();
	}

	public void runExample() {
		parseDocument();
		printData();
		saveRecord(myApps, myHeaders, myFooters);
	}

	private void parseDocument() {

		// get a factory
		SAXParserFactory spf = SAXParserFactory.newInstance();
		try {

			// get a new instance of parser
			SAXParser sp = spf.newSAXParser();

			// parse the file and also register this class for call backs
			 //sp.parse("D:\\SidhiVinayak\\3-12-2015\\Sample\\src\\ACS.xml", this);
	//sp.parse("D:\\SidhiVinayak\\3-12-2015\\Sample\\src\\ACES.xml",this);
			sp.parse("D:\\SidhiVinayak\\3-12-2015\\TP\\src\\acesALLTagAndAttributeRead.xml",this);
			//sp.parse("D:\\SidhiVinayak\\3-12-2015\\Sample\\src\\ACES_MAHLEOriginal_Filters.xml", this);
		} catch (SAXException se) {
			se.printStackTrace();
		} catch (ParserConfigurationException pce) {
			pce.printStackTrace();
		} catch (IOException ie) {
			ie.printStackTrace();
		}
	}

	/**
	 * Iterate through the list and print the contents
	 */
	private void printData() {

		System.out.println("No of RecordCount '" + myFooters.size() + "'.");
		Iterator<Footer> it = myFooters.iterator();
		while (it.hasNext()) {
			System.out.println(it.next().toString());
		}

		System.out.println("No of Headers '" + myHeaders.size() + "'.");
		Iterator<Header> itr = myHeaders.iterator();
		while (itr.hasNext()) {
			System.out.println(itr.next().toString());
		}

		System.out.println("No of Apps '" + myApps.size() + "'.");
		Iterator<App> itrtr = myApps.iterator();
		while (itrtr.hasNext()) {
			System.out.println(itrtr.next().toString());
		}

	}

	// Event Handlers
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		// reset
		tempVal = "";
		

		if (qName.equalsIgnoreCase("Footer")) {
			// create a new instance of employee
			tempFooter = new Footer();
			// tempFooter.setType(attributes.getValue("type"));
		}
		if (qName.equalsIgnoreCase("Header")) {
			// create a new instance of employee
			tempHeader = new Header();
			// tempHeader.setType(attributes.getValue("type"));
		}
		if (qName.equalsIgnoreCase("App")) {
			// create a new instance of employee
			tempValu = "";
			tempValue = "";
			tempUom = "";
			tempApp = new App();
			tempApp.setId(Long.parseLong(attributes.getValue("id")));
			tempApp.setAction(attributes.getValue("action"));
			tempApp.setValidate(attributes.getValue("validate"));
			tempApp.setRef(attributes.getValue("ref"));
		}
		if (qName.equalsIgnoreCase("BaseVehicle")) {
			String id = attributes.getValue("id");
			tempApp.setBaseVehicleId(Long.parseLong(id));
		}
		if (qName.equalsIgnoreCase("EngineBase")) {
			tempApp.setEngineBaseId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("EngineDesignation")) {
			tempApp.setEngineDesignationId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FuelDeliverySubType")) {
			tempApp.setFuelDeliverySubTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Note")) {
			String id = attributes.getValue("id");
			if (id != null) {
				tempApp.setNoteId(Long.parseLong(id));
			}
			String lang = attributes.getValue("lang");
			if (lang != null) {
				tempApp.setNoteLang(lang);
			}
		}
		if (qName.equalsIgnoreCase("Part")) {
			tempApp.setPartBrandAAIAId(attributes.getValue("BrandAAIAID"));
		}
		if (qName.equalsIgnoreCase("Aspiration")) {
			tempApp.setAspirationId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("BedLength")) {
			tempApp.setBedLengthId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("BedType")) {
			tempApp.setBedTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("BodyNumDoors")) {
			tempApp.setBodyNumDoorsId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("BodyType")) {
			tempApp.setBodyTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("BrakeABS")) {
			tempApp.setBrakeABSId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("BrakeSystem")) {
			tempApp.setBrakeSystemId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("CylinderHeadType")) {
			tempApp.setCylinderHeadTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("DriveType")) {
			tempApp.setDriveTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("EngineMfr")) {
			tempApp.setEngineMfrId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("EngineVersion")) {
			tempApp.setEngineVersionId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("EngineVIN")) {
			tempApp.setEngineVINId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FrontBrakeType")) {
			tempApp.setFrontBrakeTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FrontSpringType")) {
			tempApp.setFrontSpringTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FuelDeliverySubType")) {
			tempApp.setFuelDeliverySubTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FuelDeliveryType")) {
			tempApp.setFuelDeliveryTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FuelSystemControlType")) {
			tempApp.setFuelSystemControlTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FuelSystemDesign")) {
			tempApp.setFuelSystemDesignId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("FuelType")) {
			tempApp.setFuelTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("IgnitionSystemType")) {
			tempApp.setIgnitionSystemTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Make")) {
			tempApp.setMakeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("MfrBodyCode")) {
			tempApp.setMfrBodyCodeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Model")) {
			tempApp.setModelId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("PowerOutput")) {
			tempApp.setPowerOutputId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("RearBrakeType")) {
			tempApp.setRearBrakeTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("RearSpringType")) {
			tempApp.setRearSpringTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Region")) {
			tempApp.setRegionId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("SteeringType")) {
			tempApp.setSteeringTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("SteeringSystem")) {
			tempApp.setSteeringSystemId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("SubModel")) {
			tempApp.setSubModelId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransElecControlled")) {
			tempApp.setTransElecContolledId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransmissionMfr")) {
			tempApp.setTransmissionMfrId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransmissionMfrCode")) {
			tempApp.setTransmissionMfrCodeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransmissionBase")) {
			tempApp.setTransmissionBaseId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransmissionControlType")) {
			tempApp.setTransmissionControlTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransmissionNumSpeeds")) {
			tempApp.setTransmissionNumSpeedsId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("TransmissionType")) {
			tempApp.setTransmissionTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("ValvesPerEngine")) {
			tempApp.setValvesPerEngineId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("VehicleType")) {
			tempApp.setVehicleTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("WheelBase")) {
			tempApp.setWheelBaseId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Years")) {
			tempApp.setYearsFrom(attributes.getValue("from"));
			tempApp.setYearsTo(attributes.getValue("to"));
		}
		if (qName.equalsIgnoreCase("PartType")) {
			tempApp.setPartTypeId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Qual")) {
			tempApp.setQualId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Param")) {
				String value = attributes.getValue("value");
				if (value != null) {
					tempApp.setqParamValue(value + "" + tempValue);
					tempValue = tempValue + "," + value;
				}
		
				String uom = attributes.getValue("uom");
				if (uom != null) {
					tempApp.setqParamUom(uom + "" + tempUom);
					tempUom = tempUom + "," + uom;
				}
				
				String altvalue = attributes.getValue("altvalue");
				if (altvalue != null) {
					tempApp.setqParamAltValue(altvalue);
				}
				String altuom = attributes.getValue("altuom");
				if (altuom != null) {
					tempApp.setqParamAltUom(altuom);
				}
		}
		if (qName.equalsIgnoreCase("Position")) {
			tempApp.setPositionId(Long.parseLong(attributes.getValue("id")));
		}
		if (qName.equalsIgnoreCase("Asset")) {
			String action = attributes.getValue("action");
			if (action != null) {
				tempApp.setAssetAction(action);
			}
			String id = attributes.getValue("id");
			if (id != null) {
				tempApp.setAssetId(Long.parseLong(id));
			}
			tempApp.setAssetRef(attributes.getValue("ref"));
			tempApp.setAssetValidate(attributes.getValue("validate"));
		}
	}

	public void characters(char[] ch, int start, int length)
			throws SAXException {
		tempVal = new String(ch, start, length);
	}

	public void endElement(String uri, String localName, String qName)
			throws SAXException {

		if (qName.equalsIgnoreCase("Footer")) {
			// add it to the list
			myFooters.add(tempFooter);
		} else if (qName.equalsIgnoreCase("RecordCount")) {
			tempFooter.setRecordCount(Integer.parseInt(tempVal));
		}
		if (qName.equalsIgnoreCase("Header")) {
			// add it to the list
			myHeaders.add(tempHeader);
		} else if (qName.equalsIgnoreCase("Company")) {
			tempHeader.setCompany(tempVal);
		} else if (qName.equalsIgnoreCase("SenderName")) {
			tempHeader.setSenderName(tempVal);
		} else if (qName.equalsIgnoreCase("SenderPhone")) {
			tempHeader.setSenderPhone(tempVal);
		} else if (qName.equalsIgnoreCase("TransferDate")) {
			tempHeader.setTransferDate(tempVal);
		} else if (qName.equalsIgnoreCase("BrandAAIAID")) {
			tempHeader.setBrandAAIAID(tempVal);
		} else if (qName.equalsIgnoreCase("DocumentTitle")) {
			tempHeader.setDocumentTitle(tempVal);
		} else if (qName.equalsIgnoreCase("EffectiveDate")) {
			tempHeader.setTransferDate(tempVal);
		} else if (qName.equalsIgnoreCase("SubmissionType")) {
			tempHeader.setSubmissionType(tempVal);
		} else if (qName.equalsIgnoreCase("MapperCompany")) {
			tempHeader.setMapperCompany(tempVal);
		} else if (qName.equalsIgnoreCase("MapperContact")) {
			tempHeader.setMapperContact(tempVal);
		} else if (qName.equalsIgnoreCase("MapperPhone")) {
			tempHeader.setMapperPhone(tempVal);
		} else if (qName.equalsIgnoreCase("MapperEmail")) {
			tempHeader.setMapperEmail(tempVal);
		} else if (qName.equalsIgnoreCase("VcdbVersionDate")) {
			tempHeader.setVcdbVersionDate(tempVal);
		} else if (qName.equalsIgnoreCase("QdbVersionDate")) {
			tempHeader.setQdbVersionDate(tempVal);
		} else if (qName.equalsIgnoreCase("PcdbVersionDate")) {
			tempHeader.setPcdbVersionDate(tempVal);
		} else if (qName.equalsIgnoreCase("ApprovedFor")) {
			tempHeader.setApprovedFor(tempVal);
		} else if (qName.equalsIgnoreCase("DocFormNumber")) {
			tempHeader.setDocFormNumber(tempVal);
		} else if (qName.equalsIgnoreCase("MapperPhoneExt")) {
			tempHeader.setMapperPhoneExt(tempVal);
		} else if (qName.equalsIgnoreCase("SenderPhoneExt")) {
			tempHeader.setSenderPhoneExt(tempVal);
		}
		if (qName.equalsIgnoreCase("App")) {
			// add it to the list
			myApps.add(tempApp);
		} else if (qName.equalsIgnoreCase("id")) {
			tempApp.setId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("action")) {
			tempApp.setAction(tempVal);
		} else if (qName.equalsIgnoreCase("validate")) {
			tempApp.setValidate(tempVal);
		} else if (qName.equalsIgnoreCase("ref")) {
			tempApp.setRef(tempVal);
		} else if (qName.equalsIgnoreCase("Note")) {
			tempApp.setNote(tempValu + " " + tempVal);
			tempValu = tempValu + tempVal;
		} else if (qName.equalsIgnoreCase("Note lang")) {
			tempApp.setNoteLang(tempVal);
		} else if (qName.equalsIgnoreCase("Qty")) {
			tempApp.setQty(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("PartType id")) {
			tempApp.setPartTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Part BrandAAIAID")) {
			tempApp.setPartBrandAAIAId(tempVal);
		} else if (qName.equalsIgnoreCase("Aspiration id")) {
			tempApp.setAspirationId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("BedLength id")) {
			tempApp.setBedLengthId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("BedType id")) {
			tempApp.setBedTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("BodyNumDoors id")) {
			tempApp.setBodyNumDoorsId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("BodyType id")) {
			tempApp.setBodyTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("BrakeABS id")) {
			tempApp.setBrakeABSId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("BrakeSystem id")) {
			tempApp.setBrakeSystemId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("CylinderHeadType id")) {
			tempApp.setCylinderHeadTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("DriveType id")) {
			tempApp.setDriveTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("EngineMfr id")) {
			tempApp.setEngineMfrId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("EngineVersion id")) {
			tempApp.setEngineVersionId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("EngineVIN id")) {
			tempApp.setEngineVINId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FrontBrakeType id")) {
			tempApp.setFrontBrakeTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FrontSpringType id")) {
			tempApp.setFrontSpringTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FuelDeliveryType id")) {
			tempApp.setFuelDeliveryTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FuelSystemControlType id")) {
			tempApp.setFuelSystemControlTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FuelSystemDesign id")) {
			tempApp.setFuelSystemDesignId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FuelType id")) {
			tempApp.setFuelTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("IgnitionSystemType id")) {
			tempApp.setIgnitionSystemTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Make id")) {
			tempApp.setMakeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("MfrBodyCode id")) {
			tempApp.setMfrBodyCodeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Model id")) {
			tempApp.setModelId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("PowerOutput id")) {
			tempApp.setPowerOutputId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("RearBrakeType id")) {
			tempApp.setRearBrakeTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("RearSpringType id")) {
			tempApp.setRearSpringTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Region id")) {
			tempApp.setRegionId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("SteeringType id")) {
			tempApp.setSteeringTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("SteeringSystem id")) {
			tempApp.setSteeringSystemId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("SubModel id")) {
			tempApp.setSubModelId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransElecControlled id")) {
			tempApp.setTransElecContolledId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransmissionMfr id")) {
			tempApp.setTransmissionMfrId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransmissionMfrCode id")) {
			tempApp.setTransmissionMfrCodeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransmissionBase id")) {
			tempApp.setTransmissionBaseId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransmissionControlType id")) {
			tempApp.setTransmissionControlTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransmissionNumSpeeds id")) {
			tempApp.setTransmissionNumSpeedsId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("TransmissionType id")) {
			tempApp.setTransmissionTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("ValvesPerEngine id")) {
			tempApp.setValvesPerEngineId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("VehicleType id")) {
			tempApp.setVehicleTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("WheelBase id")) {
			tempApp.setWheelBaseId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("from")) {
			tempApp.setYearsFrom(tempVal);
		} else if (qName.equalsIgnoreCase("to")) {
			tempApp.setYearsTo(tempVal);
		} else if (qName.equalsIgnoreCase("Position id")) {
			tempApp.setPositionId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Part")) {
			tempApp.setPart(tempVal);
		} else if (qName.equalsIgnoreCase("BaseVehicle id")) {
			tempApp.setBaseVehicleId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("EngineBase id")) {
			tempApp.setEngineBaseId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("EngineDesignation id")) {
			tempApp.setEngineDesignationId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("FuelDeliverySubType id")) {
			tempApp.setFuelDeliverySubTypeId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Note id")) {
			tempApp.setNoteId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("Note lang")) {
			tempApp.setNoteLang(tempVal);
		} else if (qName.equalsIgnoreCase("Qual id")) {
			tempApp.setQualId(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("value")) {
			tempApp.setqParamValue(tempVal);
		} else if (qName.equalsIgnoreCase("uom")) {
			tempApp.setqParamUom(tempVal);
		} else if (qName.equalsIgnoreCase("text")) {
			tempApp.setqPText(tempVal);
		}else if (qName.equalsIgnoreCase("altvalue")) {
			tempApp.setqParamAltValue(tempVal);
		} else if (qName.equalsIgnoreCase("altuom")) {
			tempApp.setqParamAltUom(tempVal);
		} else if (qName.equalsIgnoreCase("AssetItemOrder")) {
			tempApp.setAssetItemOrder(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("AssetItemRef")) {
			tempApp.setAssetItemRef(tempVal);
		} else if (qName.equalsIgnoreCase("AssetItemName")) {
			tempApp.setAssetItemName(tempVal);
		} else if (qName.equalsIgnoreCase("DisplayOrder")) {
			tempApp.setDisplayOrder(Long.parseLong(tempVal));
		} else if (qName.equalsIgnoreCase("MfrLabel")) {
			tempApp.setMfrLabel(tempVal);
		} else if (qName.equalsIgnoreCase("Company")) {
			tempHeader.setCompany(tempVal);
		}

		else if (qName.equalsIgnoreCase("action")) {
			tempApp.setAssetAction(tempVal);
		} else if (qName.equalsIgnoreCase("id")) {
			tempApp.setAssetId(Long.parseLong(tempVal));
		}
	}


	public void saveRecord(List<App> myapp, List<Header> myheader,
			List<Footer> myfooter) {
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement prSt = null;
		ResultSet rs1 = null;

		String insertHdr = "INSERT INTO HDR "
				+ "(HId, approvedFor, brandAIAID, company, docFormNumber, documentTitle, effectiveDate,"
				+ " mapperCompany, mapperContact, mapperEmail, mapperPhone, mapperPhoneExt, pcdbVersionDate,"
				+ " qdbVersionDate, senderName, senderPhone, senderPhoneExt, submissionType, transferDate,"
				+ " vcdbVersionDate) VALUES (hdr_sequence.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"
				+ " ?, ?, ?, ?, ?, ?)";

		String insertFtr = "INSERT INTO FTR " 
				+ "(FId,R_Count) VALUES"
				+ "(ftr_sequence.NEXTVAL,?)";
		
		String storeSql = "SELECT (APID, action, id, ref, aValidate, aspirationId , assetAction,"
			+ " assetId, assetRef, assetValidate, assetItemOrder, assetItemRef, assetItemName,"
			+ " baseVehicleId, bedLengthId, bedTypeId, bodyNumDoorsId, bodyTypeId, brakeABSId,"
			+ " brakeSystemId, cylinderHeadTypeId, displayOrder, driveTypeId,"
			+ " engineBaseId, engineDesignationId, engineMfrId, engineVersionId,"
			+ " engineVINId, frontBrakeTypeId, frontSpringTypeId, fuelDeliverySubTypeId,"
			+ " fuelDeliveryTypeId, fuelSystemControlTypeId, fuelSystemDesignId, fuelTypeId,"
			+ " ignitionSystemTypeId, makeId, mfrLabel, mfrBodyCodeId,"
			+ " modelId, note, noteId, noteLang, part,"
			+ " partBrandAAIAId, partTypeId, positionId, powerOutputId, qualId,"
			+ " qParamUom, qParamValue, qParamAltValue, qParamAltUom, qPText, qty, rearBrakeTypeId,"
			+ " rearSpringTypeId, regionId, steeringTypeId, steeringSystemId, subModelId,"
			+ " transElecContolledId, transmissionMfrId, transmissionMfrCodeId,"
			+ " transmissionBaseId, transmissionControlTypeId, transmissionNumSpeedsId,"
			+ " transmissionTypeId, valvesPerEngineId, vehicleTypeId, wheelBaseId,"
			+ " yearsFrom, yearsTo, version, headerId,footerId ) From App where ";
		
		//=============================================================================
		String insertApp = "INSERT INTO App "
			+ "(APID, action, id, ref, aValidate, aspirationId , assetAction,"
			+ " assetId, assetRef, assetValidate, assetItemOrder, assetItemRef, assetItemName,"
			+ " baseVehicleId, bedLengthId, bedTypeId, bodyNumDoorsId, bodyTypeId, brakeABSId,"
			+ " brakeSystemId, cylinderHeadTypeId, displayOrder, driveTypeId,"
			+ " engineBaseId, engineDesignationId, engineMfrId, engineVersionId,"
			+ " engineVINId, frontBrakeTypeId, frontSpringTypeId, fuelDeliverySubTypeId,"
			+ " fuelDeliveryTypeId, fuelSystemControlTypeId, fuelSystemDesignId, fuelTypeId,"
			+ " ignitionSystemTypeId, makeId, mfrLabel, mfrBodyCodeId,"
			+ " modelId, note, noteId, noteLang, part,"
			+ " partBrandAAIAId, partTypeId, positionId, powerOutputId, qualId,"
			+ " qParamUom, qParamValue, qParamAltValue, qParamAltUom, qPText, qty, rearBrakeTypeId,"
			+ " rearSpringTypeId, regionId, steeringTypeId, steeringSystemId, subModelId,"
			+ " transElecContolledId, transmissionMfrId, transmissionMfrCodeId,"
			+ " transmissionBaseId, transmissionControlTypeId, transmissionNumSpeedsId,"
			+ " transmissionTypeId, valvesPerEngineId, vehicleTypeId, wheelBaseId,"
			+ " yearsFrom, yearsTo, version, headerId,footerId ) VALUES (app_sequence.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"
			+ " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"
			+ " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)";
		//============================================================================

		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			System.out.println("Loding Driver Class");
			// step2 create the connection object
			con = DriverManager.getConnection(
					"jdbc:oracle:thin:@192.168.2.68:1521:orcl", "test", "test");
			System.out.println("Connection created");
			// step3 create the statement object

			/*
			 * String query1 =
			 * "CREATE SEQUENCE ftr_sequence INCREMENT BY 1 START WITH 1 NOMAXVALUE NOCYCLE NOCACHE"; 
			 * String query2 =
			 * "CREATE SEQUENCE hdr_sequence INCREMENT BY 1 START WITH 1 NOMAXVALUE NOCYCLE NOCACHE"; 
			 * String query3 =
			 * "CREATE SEQUENCE app_sequence INCREMENT BY 1 START WITH 1 NOMAXVALUE NOCYCLE NOCACHE"; 
			 * prSt = con.prepareStatement(query1); 
			 * prSt = con.prepareStatement(query2); 
			 * prSt = con.prepareStatement(query3); 
			 * prSt.executeQuery(); 
			 * System.out.println("Creating Sequence");
			 */

			/*
			 * String query1 =
			 * "CREATE TABLE FTR(FID INT NOT NULL, R_COUNT INT, PRIMARY KEY (fID))";
			 * prSt = con.prepareStatement(query1);
			 * prSt.executeQuery();
			 * System.out.println("Footer Table created");
			 */

			/*
			 * String query2 =  "CREATE TABLE HDR(HID INT NOT NULL, approvedFor varchar(10)," 
			 * + brandAIAID varchar(10), company varchar(30), docFormNumber varchar(10),"
			 * + documentTitle varchar(30), effectiveDate varchar(30),  mapperCompany varchar(50),"
			 * + mapperContact varchar(30), mapperEmail varchar(30), mapperPhone varchar(20),"
			 * + mapperPhoneExt varchar(10), pcdbVersionDate varchar(30), qdbVersionDate varchar(30),"
			 * + senderName varchar(30), senderPhone varchar(20), senderPhoneExt varchar(10),"
			 * + submissionType varchar(10), transferDate varchar(30), vcdbVersionDate varchar(30), PRIMARY KEY (HID))"; 
			 * prSt = con.prepareStatement(query2);
			 * prSt.executeQuery();
			 * System.out.println("Header Table created");
			 */

			/*
			  String query3 = "CREATE TABLE App(APID number NOT NULL, action varchar(5), id number, ref varchar(30)," +
			  		" aValidate varchar(10) DEFAULT 'Yes', aspirationId number, assetAction varchar(10),  assetId number," +
			  		" assetRef varchar(10), assetValidate varchar(10) DEFAULT 'Yes', assetItemOrder number," +
			  		" assetItemRef varchar(10), assetItemName varchar(20), baseVehicleId number," +
			  		" bedLengthId number, bedTypeId number, bodyNumDoorsId number, bodyTypeId number, brakeABSId number," +
			  		" brakeSystemId number, cylinderHeadTypeId number, displayOrder number, driveTypeId number," +
			  		" engineBaseId number, engineDesignationId number, engineMfrId number, engineVersionId number," +
			  		" engineVINId number, frontBrakeTypeId number, frontSpringTypeId number, fuelDeliverySubTypeId number," +
			  		" fuelDeliveryTypeId number, fuelSystemControlTypeId number, fuelSystemDesignId number, fuelTypeId number," +
			  		" ignitionSystemTypeId number, makeId number, mfrLabel varchar(30), mfrBodyCodeId number," +
			  		" modelId number, note varchar(200), noteId number, noteLang varchar(10), part varchar(30)," +
			  		" partBrandAAIAId varchar(30), partTypeId number, positionId number, powerOutputId number, qualId number," +
			  		" qParamUom varchar(20), qParamValue varchar(50), qParamAltValue varchar(20), qParamAltUom varchar(50), qPText varchar(20), qty number, rearBrakeTypeId number," +
			  		" rearSpringTypeId number, regionId number, steeringTypeId number, steeringSystemId number, subModelId number," +
			  		" transElecContolledId number, transmissionMfrId number, transmissionMfrCodeId number," +
			  		" transmissionBaseId number, transmissionControlTypeId number, transmissionNumSpeedsId number," +
			  		" transmissionTypeId number, valvesPerEngineId number, vehicleTypeId number, wheelBaseId number," +
			  		" yearsFrom varchar(10), yearsTo varchar(10), version varchar(10), headerId number, footerId number," +
			  		" PRIMARY KEY (APID))";
			  prSt = con.prepareStatement(query3);
			  prSt.executeQuery();
			 System.out.println("App Table created");
			*/
			
			/*prSt = con.prepareStatement(insertFtr); 
			prSt.setLong(1,(tempFooter.getRecordCount()));
			prSt.execute();
			System.out.println("Record added in Footer");
			
			prSt = con.prepareStatement(insertHdr); 
			{
			prSt.setString(1,(tempHeader.getApprovedFor()));
			prSt.setString(2,(tempHeader.getBrandAAIAID())); 
			prSt.setString(3,(tempHeader.getCompany())); 
			prSt.setString(4,(tempHeader.getDocFormNumber())); 
			prSt.setString(5,(tempHeader.getDocumentTitle())); 
			prSt.setString(6,(tempHeader.getEffectiveDate())); 
			prSt.setString(7,(tempHeader.getMapperCompany())); 
			prSt.setString(8,(tempHeader.getMapperContact())); 
			prSt.setString(9,(tempHeader.getMapperEmail())); 
			prSt.setString(10,(tempHeader.getMapperPhone())); 
			prSt.setString(11,(tempHeader.getMapperPhoneExt())); 
			prSt.setString(12,(tempHeader.getPcdbVersionDate())); 
			prSt.setString(13,(tempHeader.getQdbVersionDate())); 
			prSt.setString(14,(tempHeader.getSenderName())); 
			prSt.setString(15,(tempHeader.getSenderPhone())); 
			prSt.setString(16,(tempHeader.getSenderPhoneExt())); 
			prSt.setString(17,(tempHeader.getSubmissionType())); 
			prSt.setString(18,(tempHeader.getTransferDate())); 
			prSt.setString(19,(tempHeader.getVcdbVersionDate())); 
			prSt.addBatch();
			}
			prSt.executeBatch();
			System.out.println("Record added in Header");
			*/
			int s = 0;
			int head = 0;
			int s1 = 0;
			int foot = 0;
			rs = con.createStatement().executeQuery("select MAX(HId) from HDR");
			if (rs != null) {
				while (rs.next()) {
					head = rs.getInt(1);
				}
			}
			System.out.println("header id======================" + head);
			s = head;
			rs1 = con.createStatement()
					.executeQuery("select MAX(FID) from FTR");
			if (rs1 != null) {
				while (rs1.next()) {
					foot = rs1.getInt(1);
				}
			}
			int x=0;
			s1 = foot;
			
			// int s1 = stmt.executeUpdate();
			System.out.println("FOOTER_ID=" + s1);
			Iterator<App> i = myApps.iterator();

			while (i.hasNext()) {
				App ap = (App)i.next();
				prSt = con.prepareStatement(insertApp);
				prSt.setString(1, (ap.getAction()));
				prSt.setLong(2, (ap.getId()));
				prSt.setString(3, (ap.getRef()));
				prSt.setString(4, (ap.getValidate()));
				prSt.setLong(5, (ap.getAspirationId()));
				prSt.setString(6, (ap.getAssetAction()));
				prSt.setLong(7, (ap.getAssetId()));
				prSt.setString(8, (ap.getAssetRef()));
				prSt.setString(9, (ap.getAssetValidate()));
				prSt.setLong(10, (ap.getAssetItemOrder()));
				prSt.setString(11, (ap.getAssetItemRef()));
				prSt.setString(12, (ap.getAssetItemName()));
				prSt.setLong(13, (ap.getBaseVehicleId()));
				prSt.setLong(14, (ap.getBedLengthId()));
				prSt.setLong(15, (ap.getBedTypeId()));
				prSt.setLong(16, (ap.getBodyNumDoorsId()));
				prSt.setLong(17, (ap.getBodyTypeId()));
				prSt.setLong(18, (ap.getBrakeABSId()));
				prSt.setLong(19, (ap.getBrakeSystemId()));
				prSt.setLong(20, (ap.getCylinderHeadTypeId()));
				prSt.setLong(21, (ap.getDisplayOrder()));
				prSt.setLong(22, (ap.getDriveTypeId()));
				prSt.setLong(23, (ap.getEngineBaseId()));
				prSt.setLong(24, (ap.getEngineDesignationId()));
				prSt.setLong(25, (ap.getEngineMfrId()));
				prSt.setLong(26, (ap.getEngineVersionId()));
				prSt.setLong(27, (ap.getEngineVINId()));
				prSt.setLong(28, (ap.getFrontBrakeTypeId()));
				prSt.setLong(29, (ap.getFrontSpringTypeId()));
				prSt.setLong(30, (ap.getFuelDeliverySubTypeId()));
				prSt.setLong(31, (ap.getFuelDeliveryTypeId()));
				prSt.setLong(32, (ap.getFuelSystemControlTypeId()));
				prSt.setLong(33, (ap.getFuelSystemDesignId()));
				prSt.setLong(34, (ap.getFuelTypeId()));
				prSt.setLong(35, (ap.getIgnitionSystemTypeId()));
				prSt.setLong(36, (ap.getMakeId()));
				prSt.setString(37, (ap.getMfrLabel()));
				prSt.setLong(38, (ap.getMfrBodyCodeId()));
				prSt.setLong(39, (ap.getModelId()));
				prSt.setString(40, (ap.getNote()));
				prSt.setLong(41, (ap.getNoteId()));
				prSt.setString(42, (ap.getNoteLang()));
				prSt.setString(43, (ap.getPart()));
				prSt.setString(44, (ap.getPartBrandAAIAId()));
				prSt.setLong(45, (ap.getPartTypeId()));
				prSt.setLong(46, (ap.getPositionId()));
				prSt.setLong(47, (ap.getPowerOutputId()));
				prSt.setLong(48, (ap.getQualId()));
				prSt.setString(49, (ap.getqParamUom()));
				prSt.setString(50, (ap.getqParamValue()));
				prSt.setString(51, (ap.getqParamAltValue()));
				prSt.setString(52, (ap.getqParamAltUom()));
				prSt.setString(53, (ap.getqPText()));
				prSt.setLong(54, (ap.getQty()));
				prSt.setLong(55, (ap.getRearBrakeTypeId()));
				prSt.setLong(56, (ap.getRearSpringTypeId()));
				prSt.setLong(57, (ap.getRegionId()));
				prSt.setLong(58, (ap.getSteeringTypeId()));
				prSt.setLong(59, (ap.getSteeringSystemId()));
				prSt.setLong(60, (ap.getSubModelId()));
				prSt.setLong(61, (ap.getTransElecContolledId()));
				prSt.setLong(62, (ap.getTransmissionMfrId()));
				prSt.setLong(63, (ap.getTransmissionMfrCodeId()));
				prSt.setLong(64, (ap.getTransmissionBaseId()));
				prSt.setLong(65, (ap.getTransmissionControlTypeId()));
				prSt.setLong(66, (ap.getTransmissionNumSpeedsId()));
				prSt.setLong(67, (ap.getTransmissionTypeId()));
				prSt.setLong(68, (ap.getValvesPerEngineId()));
				prSt.setLong(69, (ap.getVehicleTypeId()));
				prSt.setLong(70, (ap.getWheelBaseId()));
				prSt.setString(71, (ap.getYearsFrom()));
				prSt.setString(72, (ap.getYearsTo()));
				prSt.setString(73, (ap.getVersion()));
				prSt.setLong(74, head);
				prSt.setLong(75, foot);
				prSt.addBatch();
				prSt.executeBatch();
				
				prSt.close();
				
				
			}
			//prSt.executeBatch();
			prSt.close();
			System.out.println("Record added in App");
		
			/*
			 * finally{ try{ if(stmt != null) stmt.close(); if(con != null) con.close();
			 * } catch(Exception ex){} }
			 * 
			 * 
			 * /* String insertStudent = "INSERT INTO HEADER_DATA " +
			 * "(Header_id,company, senderName, SenderPhone,TransferDate,BrandAAIAID,DocumentTitle,EffectiveDate,SubmissionType,MapperCompany,MapperContact,MapperPhone,MapperEmail,VcdbVersionDate,QdbVersionDate,PcdbVersionDate, APPROVEDFOR, DOCFORMNUMBER, MAPPERPHONEEXT, SENDERPHONEEXT,ALL_VALUE) VALUES "
			 * +
			 * "(HEADER_INFO_SEQ.NEXTVAL,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
			 * ; /* String insertStudent = "INSERT INTO HEADER_INFO " +
			 * "(Header_id,Company, SenderName, SenderPhone,TransferDate,BrandAAIAID,DocumentTitle,EffectiveDate,SubmissionType,MapperCompany,MapperContact,MapperPhone,MapperEmail,VcdbVersionDate,QdbVersionDate,PcdbVersionDate, APPROVEDFOR, DOCFORMNUMBER, MAPPERPHONEEXT, SENDERPHONEEXT,ALL_VALUE) VALUES "
			 * + "(HEADER_INFO_SEQ.NEXTVAL,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			 * 
			 * 
			 * prSt = connect1.prepareStatement(insertStudent);
			 * 
			 * 
			 * //System.out.println("Header Object=============="+header);
			 * 
			 * 
			 * prSt.setString(1, (header.getCompany())); prSt.setString(2,
			 * (header.getSenderName())); prSt.setString(3, (header.getSenderPhone()));
			 * prSt.setString(4, (header.getTransferDate())); prSt.setString(5,
			 * (header.getBrandAAIAID())); prSt.setString(6,
			 * (header.getDocumentTitle())); prSt.setString(7,
			 * (header.getEffectiveDate())); prSt.setString(8,
			 * (header.getSubmissionType())); prSt.setString(9,
			 * (header.getMapperCompany())); prSt.setString(10,
			 * (header.getMapperContact())); prSt.setString(11,
			 * (header.getMapperPhone())); prSt.setString(12,
			 * (header.getMapperEmail())); prSt.setString(13,
			 * (header.getVcdbVersionDate())); prSt.setString(14,
			 * (header.getQdbVersionDate())); prSt.setString(15,
			 * (header.getPcdbVersionDate()));
			 * 
			 * 
			 * System.out.println("excute uupdate start"); prSt.execute();
			 * System.out.println("excute uupdate end");
			 */

			/*
			 * 
			 * String insertHdr = "INSERT INTO APP_M " + "VALUES" +
			 * "(ep1_sequence.NEXTVAL,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?, "
			 * + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"; prSt =
			 * con.prepareStatement(insertHdr); prSt.setInt(1, tempFooter.getfPId());
			 * prSt.setString(2, (tempApp.getId())); prSt.setString(3,
			 * (tempApp.getAction())); prSt.setString(4, (tempApp.getValidate()));
			 * 
			 * prSt.setString(5, (tempApp.getBaseVehicleId()));
			 * 
			 * prSt.setString(6, (tempApp.getEngineBaseId()));
			 * 
			 * prSt.setString(7, (tempApp.getEngineDesignationId())); prSt.setString(8,
			 * (tempApp.getFuelDeliverySubTypeId())); prSt.setString(9,
			 * (tempApp.getNote())); prSt.setString(10, (tempApp.getQty()));
			 * 
			 * prSt.setString(12, (tempApp.getPartTypeId())); prSt.setString(13,
			 * (tempApp.getPositionId())); prSt.setString(14, (tempApp.getPart()));
			 * prSt.setString(18, (tempApp.getAspirationId())); prSt.setString(15,
			 * (tempApp.getAspirationId())); prSt.setString(16,
			 * (tempApp.getBedTypeId())); prSt.setString(17,
			 * (tempApp.getBodyNumDoorsId())); prSt.setString(18,
			 * (tempApp.getBodyTypeId())); prSt.setString(19,
			 * (tempApp.getBrakeABSId())); prSt.setString(20,
			 * (tempApp.getCylinderHeadTypeId())); prSt.setString(21,
			 * (tempApp.getDisplayOrder())); prSt.setString(22,
			 * (tempApp.getDriveTypeId())); prSt.setString(23,
			 * (tempApp.getEngineMfrId())); prSt.setString(28,
			 * (tempApp.getEngineVersionId())); prSt.setString(24,
			 * (tempApp.getEngineVersionId())); prSt.setString(25,
			 * (tempApp.getEngineVINId())); prSt.setString(26,
			 * (tempApp.getFrontBrakeTypeId())); prSt.setString(27,
			 * (tempApp.getSteeringTypeId())); prSt.setString(28,
			 * (tempApp.getFuelDeliveryTypeId())); prSt.setString(29,
			 * (tempApp.getFuelSystemControlTypeId())); prSt.setString(30,
			 * (tempApp.getFuelSystemDesignId())); prSt.setString(31,
			 * (tempApp.getFuelTypeId())); prSt.setString(32,
			 * (tempApp.getIgnitionSystemTypeId())); prSt.setString(33,
			 * (tempApp.getMakeId())); prSt.setString(34, (tempApp.getMfrLabel()));
			 * prSt.setString(35, (tempApp.getModelId())); prSt.setString(36,
			 * (tempApp.getPowerOutputId())); prSt.setString(37, (tempApp.getQualId()));
			 * prSt.setString(38, (tempApp.getRearBrakeTypeId())); prSt.setString(39,
			 * (tempApp.getRearSpringTypeId())); prSt.setString(40,
			 * (tempApp.getRegionId())); prSt.setString(41,
			 * (tempApp.getSteeringTypeId())); prSt.setString(42,
			 * (tempApp.getSteeringSystemId())); prSt.setString(49,
			 * (tempApp.getSubModelId())); prSt.setString(43,
			 * (tempApp.getSubModelId())); prSt.setString(44,
			 * (tempApp.getTransElecContolledId())); prSt.setString(45,
			 * (tempApp.getTransmissionMfrId())); prSt.setString(46,
			 * (tempApp.getTransmissionMfrCodeId())); prSt.setString(47,
			 * (tempApp.getTransmissionBaseId())); prSt.setString(48,
			 * (tempApp.getTransmissionControlTypeId())); prSt.setString(49,
			 * (tempApp.getTransmissionNumSpeedsId())); prSt.setString(50,
			 * (tempApp.getTransmissionTypeId())); prSt.setString(51,
			 * (tempApp.getValvesPerEngineId())); prSt.setString(52,
			 * (tempApp.getVehicleTypeId())); prSt.setString(53,
			 * (tempApp.getWheelBaseId())); prSt.setString(54,
			 * (tempApp.getYearsFrom())); prSt.setString(55, (tempApp.getYearsTo())); //
			 * prSt.setLong(56, s1);
			 */

			/*
			 * String insertStudent = "INSERT INTO APPTYPE_DATA " + "VALUES" +
			 * "(APPTYPE_DATA_SEQ.NEXTVAL,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?, "
			 * +
			 * "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
			 * ; statement3 = appconnect5.prepareStatement(insertStudent); int count2=0;
			 * label1:for (App app : appList) { try {
			 * 
			 * 
			 * statement3.setString(1, (app.getAction())); statement3.setLong(2,
			 * (app.getId())); statement3.setString(3, (app.getRef()));
			 * statement3.setString(4, (app.getValidate())); statement3.setString(5,
			 * (app.getAspiration())); statement3.setLong(6, (app.getAspirationId()));
			 * statement3.setString(7, (app.getAsset())); statement3.setString(8,
			 * (app.getAssetaction())); statement3.setLong(9, (app.getAssetId()));
			 * statement3.setString(10, (app.getAssetref())); statement3.setString(11,
			 * (app.getBaseVehicle())); statement3.setLong(12,
			 * (app.getBaseVehicleId())); statement3.setLong(13, (app.getBedLength()));
			 * statement3.setLong(14, (app.getBedLengthid())); statement3.setString(15,
			 * (app.getBedType())); statement3.setLong(16, (app.getBedTypeid()));
			 * statement3.setLong(17, (app.getBodyNumDoors())); statement3.setLong(18,
			 * (app.getBodyNumDoorid())); statement3.setString(19, (app.getBodyType()));
			 * statement3.setLong(20, (app.getBodyTypeid())); statement3.setString(21,
			 * (app.getBreakABS())); statement3.setLong(22, (app.getBreakABSid()));
			 * statement3.setString(23, (app.getBreakSystem())); statement3.setLong(24,
			 * (app.getBreakSystemid())); statement3.setString(25, (app.getCompany()));
			 * statement3.setString(26, (app.getCylinderHeadType()));
			 * statement3.setLong(27, (app.getCylinderHeadTypeid()));
			 * statement3.setString(28, (app.getDisplayOrder()));
			 * statement3.setString(29, (app.getDocFormNumber()));
			 * statement3.setString(30, (app.getDocumentTitle()));
			 * statement3.setString(31, (app.getDriveType())); statement3.setLong(32,
			 * (app.getDriveTypeid())); statement3.setString(33,
			 * (app.getEffectiveDate())); statement3.setString(34,
			 * (app.getEngineBase())); statement3.setLong(35, (app.getEngineBaseId()));
			 * statement3.setString(36, (app.getEngineMfr())); statement3.setString(37,
			 * (app.getEngineDesignation())); statement3.setLong(38,
			 * (app.getEngineDesignationId())); statement3.setLong(39,
			 * (app.getEngineMfrid())); statement3.setString(30,
			 * (app.getEngineVersion())); statement3.setLong(31,
			 * (app.getEngineVersionId())); statement3.setString(32,
			 * (app.getEngineVIN())); statement3.setLong(33, (app.getEngineVINId()));
			 * statement3.setString(34, (app.getFooter())); statement3.setString(35,
			 * (app.getFrontBreakType())); statement3.setLong(36,
			 * (app.getFrontBreakTypeid())); statement3.setString(37,
			 * (app.getFrontSpringType())); statement3.setLong(38,
			 * (app.getFrontSpringTypeid())); statement3.setLong(39,
			 * (app.getFuelDeliverySubType())); statement3.setLong(40,
			 * (app.getFuelDeliverySubTypeid())); statement3.setString(41,
			 * (app.getFuelDeliveryType())); statement3.setLong(42,
			 * (app.getFuelDeliveryTypeid())); statement3.setString(43,
			 * (app.getFuelSystemControlType())); statement3.setLong(44,
			 * (app.getFuelSystemControlTypeid())); statement3.setString(45,
			 * (app.getFuelSystemDesign())); statement3.setLong(46,
			 * (app.getFuelSystemDesignid())); statement3.setString(47,
			 * (app.getFuelType())); statement3.setLong(48, (app.getFuelTypeid()));
			 * statement3.setString(49, (app.getHeater())); statement3.setString(50,
			 * (app.getIgnitionSystemType())); statement3.setLong(51,
			 * (app.getIgnitionSystemTypeid())); statement3.setString(52,
			 * (app.getMake())); statement3.setLong(53, (app.getMakeid()));
			 * statement3.setString(54, (app.getMapperCompany()));
			 * statement3.setLong(55, (app.getMapperContact()));
			 * statement3.setString(56, (app.getEmail())); statement3.setString(57,
			 * (app.getMapperPhone())); statement3.setLong(58,
			 * (app.getMapperPhoneExt())); statement3.setString(59,
			 * (app.getMfrBodyCode())); statement3.setLong(60,
			 * (app.getMfrBodyCodeid())); statement3.setString(61, (app.getMfrLabel()));
			 * statement3.setString(62, (app.getModel())); statement3.setString(63,
			 * (app.getNote())); statement3.setString(64, (app.getNoteid()));
			 * statement3.setString(65, (app.getNotelang())); statement3.setString(66,
			 * (app.getPart())); statement3.setString(67, (app.getPartBrandAAIAID()));
			 * statement3.setString(68, (app.getPartType())); statement3.setLong(69,
			 * (app.getPartTypeid())); statement3.setString(70,
			 * (app.getPcdbVersionDate())); statement3.setLong(71, (app.getPosition()));
			 * statement3.setLong(72, (app.getPositionid())); statement3.setString(73,
			 * (app.getPowerOutput())); statement3.setLong(74,
			 * (app.getPowerOutputid())); statement3.setString(75,
			 * (app.getQdbVersionDate())); statement3.setLong(76, (app.getQual()));
			 * statement3.setLong(77, (app.getQty())); statement3.setString(78,
			 * (app.getRearBreakType())); statement3.setLong(79,
			 * (app.getRearBreakTypeid())); statement3.setString(80,
			 * (app.getRearSpringType())); statement3.setLong(81,
			 * (app.getRearSpringTypeid())); statement3.setLong(82,
			 * (app.getRecordCount())); statement3.setString(83, (app.getRegion()));
			 * statement3.setLong(84, (app.getRegionid())); statement3.setString(85,
			 * (app.getSenderName())); statement3.setString(86, (app.getSenderPhone()));
			 * statement3.setString(87, (app.getSenderPhoneExt()));
			 * statement3.setString(88, (app.getSteeringType())); statement3.setLong(89,
			 * (app.getSteeringTypeid())); statement3.setString(90,
			 * (app.getSteeringSystem())); statement3.setLong(91,
			 * (app.getSteeringSystemid())); statement3.setString(92,
			 * (app.getSubmissiontype())); statement3.setString(93,
			 * (app.getSubModel())); statement3.setLong(94, (app.getSubModelid()));
			 * statement3.setString(95, (app.getTranselecContolled()));
			 * statement3.setLong(96, (app.getTranselecContolledid()));
			 * statement3.setString(97, (app.getTransferDate()));
			 * statement3.setString(98, (app.getTransMissionMfr()));
			 * statement3.setLong(99, (app.getTransMissionMfrid()));
			 * statement3.setString(100, (app.getTransMissionMfrCode()));
			 * statement3.setLong(101, (app.getTransMissionMfrCodeid()));
			 * statement3.setString(102, (app.getTransMissionBase()));
			 * statement3.setLong(103, (app.getTransMissionBaseid()));
			 * statement3.setString(104, (app.getTransMissionControlType()));
			 * statement3.setLong(105, (app.getTransMissionControlTypeid()));
			 * statement3.setString(106, (app.getTransMissionNumSpeeds()));
			 * statement3.setLong(107, (app.getTransMissionNumSpeedsid()));
			 * statement3.setString(108, (app.getTransMissionType()));
			 * statement3.setLong(109, (app.getTransMissionTypeid()));
			 * statement3.setString(110, (app.getValvesPerEngine()));
			 * statement3.setLong(111, (app.getValvesPerEngineid()));
			 * statement3.setString(112, (app.getVcdbVersionDate()));
			 * statement3.setString(113, (app.getVehicleType()));
			 * statement3.setLong(114, (app.getVehicleTypeid()));
			 * statement3.setString(115, (app.getWheelBase())); statement3.setLong(116,
			 * (app.getWheelBaseid())); statement3.setString(117, (app.getFromYears()));
			 * statement3.setString(118, (app.getToYear()));
			 * 
			 * 
			 * statement3.setString(119, app.toString());
			 * 
			 * statement3.execute(); //step4 execute query // rs =
			 * stmt.executeQuery("  CREATE SEQUENCE  "); //
			 * System.out.println("seq Created"); //String query =
			 * "update table emp set salary=2000 where empid=200"; //count will give you
			 * how many records got updated // int count = stmt.executeUpdate(query); //
			 * System.out.println("Updated queries: "+count); //while(rs.next()) //
			 * System.out.println("hello_data");
			 * //System.out.println(rs.getInt(1)+"  "+rs
			 * .getString(2)+"  "+rs.getString(3));
			 * 
			 * //step5 close the connection object
			 * 
			 * }catch(Exception e){ System.out.println(e); e.printStackTrace();} } /*
			 * finally{ try{ if(stmt != null) stmt.close(); if(con != null) con.close();
			 * } catch(Exception ex){} } /* // Connection con = null; //
			 * PreparedStatement prSt = null; try {
			 * Class.forName("oracle.jdbc.driver.OracleDriver"); con = DriverManager.
			 * getConnection("jdbc:oracle:thin:@<hostname>:<port num>:<DB name>"
			 * ,"user","password"); String query =
			 * "insert into emp(name,salary) values(?,?)"; prSt =
			 * con.prepareStatement(query); prSt.setString(1, "John"); prSt.setInt(2,
			 * 10000); //count will give you how many records got updated int count =
			 * prSt.executeUpdate(); //Run the same query with different values
			 * prSt.setString(1, "Cric"); prSt.setInt(2, 5000); count =
			 * prSt.executeUpdate(); } catch (ClassNotFoundException e) {
			 * e.printStackTrace(); / } catch (SQLException e) { e.printStackTrace(); }
			 * finally{ try{ if(prSt != null) prSt.close(); if(con != null) con.close();
			 * } catch(Exception ex){} }
			 */
			con.commit();
			System.out.println("Commited");
		} catch (Exception e) {
			System.out.println(e);
			e.printStackTrace();
		}
	}

	
	
	/*public void saveRecord(List<App> myapp, List<Header> myheader,
			List<Footer> myfooter) {
		Connection con = null;
		ResultSet rs = null;
		PreparedStatement prSt = null;
		ResultSet rs1 = null;

		String insertApp = "INSERT INTO App "
				+ "(APID, action, id, ref, aValidate, aspirationId , assetAction,"
				+ " assetId, assetRef, assetValidate, assetItemOrder, assetItemRef, assetItemName,"
				+ " baseVehicleId, bedLengthId, bedTypeId, bodyNumDoorsId, bodyTypeId, brakeABSId,"
				+ " brakeSystemId, cylinderHeadTypeId, displayOrder, driveTypeId,"
				+ " engineBaseId, engineDesignationId, engineMfrId, engineVersionId,"
				+ " engineVINId, frontBrakeTypeId, frontSpringTypeId, fuelDeliverySubTypeId,"
				+ " fuelDeliveryTypeId, fuelSystemControlTypeId, fuelSystemDesignId, fuelTypeId,"
				+ " ignitionSystemTypeId, makeId, mfrLabel, mfrBodyCodeId,"
				+ " modelId, note, noteId, noteLang, part,"
				+ " partBrandAAIAId, partTypeId, positionId, powerOutputId, qualId,"
				+ " qParamUom, qParamValue, qPText, qty, rearBrakeTypeId,"
				+ " rearSpringTypeId, regionId, steeringTypeId, steeringSystemId, subModelId,"
				+ " transElecContolledId, transmissionMfrId, transmissionMfrCodeId,"
				+ " transmissionBaseId, transmissionControlTypeId, transmissionNumSpeedsId,"
				+ " transmissionTypeId, valvesPerEngineId, vehicleTypeId, wheelBaseId,"
				+ " yearsFrom, yearsTo, version,headerId,footerId) VALUES (app_sequence.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"
				+ " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"
				+ " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

		String insertHdr = "INSERT INTO HDR "
				+ "(HId, approvedFor, brandAIAID, company, docFormNumber, documentTitle, effectiveDate,"
				+ " mapperCompany, mapperContact, mapperEmail, mapperPhone, mapperPhoneExt, pcdbVersionDate,"
				+ " qdbVersionDate, senderName, senderPhone, senderPhoneExt, submissionType, transferDate,"
				+ " vcdbVersionDate) VALUES (hdr_sequence.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"
				+ " ?, ?, ?, ?, ?, ?)";

		String insertFtr = "INSERT INTO FTR " 
				+ "(FId,R_Count) VALUES"
				+ "(ftr_sequence.NEXTVAL,?)";

		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			System.out.println("Loding Driver Class");
			// step2 create the connection object
			con = DriverManager.getConnection(
					"jdbc:oracle:thin:@192.168.2.68:1521:orcl", "test", "test");
			System.out.println("Connection created");
			// step3 create the statement object

			/*
			 * String query1 =
			 * "CREATE SEQUENCE ftr_sequence INCREMENT BY 1 START WITH 1 NOMAXVALUE NOCYCLE NOCACHE"; 
			 * String query2 =
			 * "CREATE SEQUENCE hdr_sequence INCREMENT BY 1 START WITH 1 NOMAXVALUE NOCYCLE NOCACHE"; 
			 * String query3 =
			 * "CREATE SEQUENCE app_sequence INCREMENT BY 1 START WITH 1 NOMAXVALUE NOCYCLE NOCACHE"; 
			 * prSt = con.prepareStatement(query1); 
			 * prSt = con.prepareStatement(query2); 
			 * prSt = con.prepareStatement(query3); 
			 * prSt.executeQuery(); 
			 * System.out.println("Creating Sequence");
			 */

			/*
			 * String query1 =
			 * "CREATE TABLE FTR(FID INT NOT NULL, R_COUNT INT, PRIMARY KEY (fID))";
			 * prSt = con.prepareStatement(query1);
			 * prSt.executeQuery();
			 * System.out.println("Footer Table created");
			 */

			/*
			 * String query2 =  "CREATE TABLE HDR(HID INT NOT NULL, approvedFor varchar(10)," 
			 * + brandAIAID varchar(10), company varchar(30), docFormNumber varchar(10),"
			 * + documentTitle varchar(30), effectiveDate varchar(30),  mapperCompany varchar(50),"
			 * + mapperContact varchar(30), mapperEmail varchar(30), mapperPhone varchar(20),"
			 * + mapperPhoneExt varchar(10), pcdbVersionDate varchar(30), qdbVersionDate varchar(30),"
			 * + senderName varchar(30), senderPhone varchar(20), senderPhoneExt varchar(10),"
			 * + submissionType varchar(10), transferDate varchar(30), vcdbVersionDate varchar(30), PRIMARY KEY (HID))"; 
			 * prSt = con.prepareStatement(query2);
			 * prSt.executeQuery();
			 * System.out.println("Header Table created");
			 */

			/*
			 * String query3 = "CREATE TABLE App(APID number NOT NULL, action varchar(5), id number, ref varchar(30),"
			 * + aValidate varchar(10) DEFAULT 'Yes', aspirationId number, assetAction varchar(10),  assetId number,"
			 * + assetRef varchar(10), assetValidate varchar(10) DEFAULT 'Yes', assetItemOrder number,"
			 * + assetItemRef varchar(10), assetItemName varchar(20), baseVehicleId number,"
			 * + bedLengthId number, bedTypeId number, bodyNumDoorsId number, bodyTypeId number, brakeABSId number,"
			 * + brakeSystemId number, cylinderHeadTypeId number, displayOrder number, driveTypeId number,"
			 * + engineBaseId number, engineDesignationId number, engineMfrId number, engineVersionId number,"
			 * + engineVINId number, frontBrakeTypeId number, frontSpringTypeId number, fuelDeliverySubTypeId number,"
			 * + fuelDeliveryTypeId number, fuelSystemControlTypeId number, fuelSystemDesignId number, fuelTypeId number,"
			 * + ignitionSystemTypeId number, makeId number, mfrLabel varchar(30), mfrBodyCodeId number,"
			 * + modelId number, note varchar(200), noteId number, noteLang varchar(10), part varchar(30),"
			 * + partBrandAAIAId varchar(30), partTypeId number, positionId number, powerOutputId number, qualId number,"
			 * + qParamUom varchar(20), qParamValue number, qPText varchar(20), qty number, rearBrakeTypeId number,"
			 * + rearSpringTypeId number, regionId number, steeringTypeId number, steeringSystemId number, subModelId number,"
			 * + transElecContolledId number, transmissionMfrId number, transmissionMfrCodeId number,"
			 * + transmissionBaseId number, transmissionControlTypeId number, transmissionNumSpeedsId number,"
			 * + transmissionTypeId number, valvesPerEngineId number, vehicleTypeId number, wheelBaseId number,"
			 * + yearsFrom varchar(10), yearsTo varchar(10), version varchar(10))"
			 * + PRIMARY KEY (APID), CONSTRAINT Ftr_Id  FOREIGN KEY (APID) REFERENCES FTR(FId),  CONSTRAINT Hdr_Id FOREIGN KEY (APID) REFERENCES HDR(HID))";
			 * prSt = con.prepareStatement(query3);
			 * prSt.executeQuery();
			 * System.out.println("App Table created");
			 */
		/*
			prSt = con.prepareStatement(insertFtr); 
			prSt.setLong(1,(tempFooter.getRecordCount()));
			prSt.execute();
			System.out.println("Record added in Footer");
			
			
			
		
				prSt = con.prepareStatement(insertHdr); 
				prSt.setString(1,(tempHeader.getApprovedFor())); 
				prSt.setString(2,(tempHeader.getBrandAAIAID())); 
				prSt.setString(3,(tempHeader.getCompany())); 
				prSt.setString(4,(tempHeader.getDocFormNumber())); 
				prSt.setString(5,(tempHeader.getDocumentTitle())); 
				prSt.setString(6,(tempHeader.getEffectiveDate())); 
				prSt.setString(7,(tempHeader.getMapperCompany())); 
				prSt.setString(8,(tempHeader.getMapperContact())); 
				prSt.setString(9,(tempHeader.getMapperEmail())); 
				prSt.setString(10,(tempHeader.getMapperPhone())); 
				prSt.setString(11,(tempHeader.getMapperPhoneExt())); 
				prSt.setString(12,(tempHeader.getPcdbVersionDate())); 
				prSt.setString(13,(tempHeader.getQdbVersionDate())); 
				prSt.setString(14,(tempHeader.getSenderName())); 
				prSt.setString(15,(tempHeader.getSenderPhone())); 
				prSt.setString(16,(tempHeader.getSenderPhoneExt())); 
				prSt.setString(17,(tempHeader.getSubmissionType())); 
				prSt.setString(18,(tempHeader.getTransferDate())); 
				prSt.setString(19,(tempHeader.getVcdbVersionDate())); 
				prSt.execute(); 
			  System.out.println("Record added in Header");
			
			int s = 0;
			int head = 0;
			int s1 = 0;
			int foot = 0;
			rs = con.createStatement().executeQuery("select MAX(HId) from HDR");
			if (rs != null) {
				while (rs.next()) {
					head = rs.getInt(1);
				}
			}
			System.out.println("header id======================" + head);
			s = head;
			rs1 = con.createStatement()
					.executeQuery("select MAX(FID) from FTR");
			if (rs1 != null) {
				while (rs1.next()) {
					foot = rs1.getInt(1);
				}
			}
			s1 = foot;
			System.out.println("FOOTER_ID=" + s1);
			Iterator<App> i = myApps.iterator();

			while (i.hasNext()) {

				App ap = (App) i.next();
				prSt = con.prepareStatement(insertApp);
				prSt.setString(1, (ap.getAction()));
				prSt.setLong(2, (ap.getId()));
				prSt.setString(3, (ap.getRef()));
				prSt.setString(4, (ap.getValidate()));
				prSt.setLong(5, (ap.getAspirationId()));
				prSt.setString(6, (ap.getAssetAction()));
				prSt.setLong(7, (ap.getAssetId()));
				prSt.setString(8, (ap.getAssetRef()));
				prSt.setString(9, (ap.getAssetValidate()));
				prSt.setLong(10, (ap.getAssetItemOrder()));
				prSt.setString(11, (ap.getAssetItemRef()));
				prSt.setString(12, (ap.getAssetItemName()));
				prSt.setLong(13, (ap.getBaseVehicleId()));
				prSt.setLong(14, (ap.getBedLengthId()));
				prSt.setLong(15, (ap.getBedTypeId()));
				prSt.setLong(16, (ap.getBodyNumDoorsId()));
				prSt.setLong(17, (ap.getBodyTypeId()));
				prSt.setLong(18, (ap.getBrakeABSId()));
				prSt.setLong(19, (ap.getBrakeSystemId()));
				prSt.setLong(20, (ap.getCylinderHeadTypeId()));
				prSt.setLong(21, (ap.getDisplayOrder()));
				prSt.setLong(22, (ap.getDriveTypeId()));
				prSt.setLong(23, (ap.getEngineBaseId()));
				prSt.setLong(24, (ap.getEngineDesignationId()));
				prSt.setLong(25, (ap.getEngineMfrId()));
				prSt.setLong(26, (ap.getEngineVersionId()));
				prSt.setLong(27, (ap.getEngineVINId()));
				prSt.setLong(28, (ap.getFrontBrakeTypeId()));
				prSt.setLong(29, (ap.getFrontSpringTypeId()));
				prSt.setLong(30, (ap.getFuelDeliverySubTypeId()));
				prSt.setLong(31, (ap.getFuelDeliveryTypeId()));
				prSt.setLong(32, (ap.getFuelSystemControlTypeId()));
				prSt.setLong(33, (ap.getFuelSystemDesignId()));
				prSt.setLong(34, (ap.getFuelTypeId()));
				prSt.setLong(35, (ap.getIgnitionSystemTypeId()));
				prSt.setLong(36, (ap.getMakeId()));
				prSt.setString(37, (ap.getMfrLabel()));
				prSt.setLong(38, (ap.getMfrBodyCodeId()));
				prSt.setLong(39, (ap.getModelId()));
				prSt.setString(40, (ap.getNote()));
				prSt.setLong(41, (ap.getNoteId()));
				prSt.setString(42, (ap.getNoteLang()));
				prSt.setString(43, (ap.getPart()));
				prSt.setString(44, (ap.getPartBrandAAIAId()));
				prSt.setLong(45, (ap.getPartTypeId()));
				prSt.setLong(46, (ap.getPositionId()));
				prSt.setLong(47, (ap.getPowerOutputId()));
				prSt.setLong(48, (ap.getQualId()));
				prSt.setString(49, (ap.getqParamUom()));
				prSt.setLong(50, (ap.getqParamValue()));
				prSt.setString(51, (ap.getqPText()));
				prSt.setLong(52, (ap.getQty()));
				prSt.setLong(53, (ap.getRearBrakeTypeId()));
				prSt.setLong(54, (ap.getRearSpringTypeId()));
				prSt.setLong(55, (ap.getRegionId()));
				prSt.setLong(56, (ap.getSteeringTypeId()));
				prSt.setLong(57, (ap.getSteeringSystemId()));
				prSt.setLong(58, (ap.getSubModelId()));
				prSt.setLong(59, (ap.getTransElecContolledId()));
				prSt.setLong(60, (ap.getTransmissionMfrId()));
				prSt.setLong(61, (ap.getTransmissionMfrCodeId()));
				prSt.setLong(62, (ap.getTransmissionBaseId()));
				prSt.setLong(63, (ap.getTransmissionControlTypeId()));
				prSt.setLong(64, (ap.getTransmissionNumSpeedsId()));
				prSt.setLong(65, (ap.getTransmissionTypeId()));
				prSt.setLong(66, (ap.getValvesPerEngineId()));
				prSt.setLong(67, (ap.getVehicleTypeId()));
				prSt.setLong(68, (ap.getWheelBaseId()));
				prSt.setString(69, (ap.getYearsFrom()));
				prSt.setString(70, (ap.getYearsTo()));
				prSt.setString(71, (ap.getVersion()));
				prSt.setLong(72, head);
				prSt.setLong(73, foot);
				prSt.addBatch();
			}
			prSt.executeBatch();
			System.out.println("Record added in App");
			
			con.commit();
			System.out.println("Commited");
		 }/*
		catch (ClassNotFoundException e) {
			 e.printStackTrace();
		}
		catch (SQLException e) { e.printStackTrace(); }
		catch(Exception e){ System.out.println(e); e.printStackTrace();}
	/*finally{ 
		try{ 
			if(prSt != null) 
				prSt.close(); 
			if(rs != null)
				rs.close();
			if(rs !=null)
				rs1.close();
			if(con != null) 
				con.close();
		}
		catch(Exception ex){ ex.printStackTrace();
		}
		}
	 }*/

public static void main(String[] args) {
		ShiftHandler sh = new ShiftHandler();
		sh.runExample();
	}

}
